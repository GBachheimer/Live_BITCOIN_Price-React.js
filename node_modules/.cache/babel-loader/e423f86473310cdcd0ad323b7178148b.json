{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachSharedListeners = void 0;\n\nvar globals_1 = require(\"./globals\");\n\nvar constants_1 = require(\"./constants\");\n\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\n\nvar socket_io_1 = require(\"./socket-io\");\n\nvar bindMessageHandler = function (webSocketInstance, url) {\n  webSocketInstance.onmessage = function (message) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (typeof subscriber.optionsRef.current.filter === 'function' && subscriber.optionsRef.current.filter(message) !== true) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nvar bindOpenHandler = function (webSocketInstance, url) {\n  webSocketInstance.onopen = function (event) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      subscriber.reconnectCount.current = 0;\n\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(constants_1.ReadyState.OPEN);\n    });\n  };\n};\n\nvar bindCloseHandler = function (webSocketInstance, url) {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = function (event) {\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      });\n      delete globals_1.sharedWebSockets[url];\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        var _a, _b;\n\n        if (subscriber.optionsRef.current.shouldReconnect && subscriber.optionsRef.current.shouldReconnect(event)) {\n          var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(function () {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, (_b = subscriber.optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n            console.warn(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n          }\n        }\n      });\n    };\n  }\n};\n\nvar bindErrorHandler = function (webSocketInstance, url) {\n  webSocketInstance.onerror = function (error) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n\n      if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), {\n          code: 1006,\n          reason: \"An error occurred with the EventSource: \" + error,\n          wasClean: false\n        }));\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      }\n    });\n\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexports.attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n  var interval;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = socket_io_1.setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n  return function () {\n    if (interval) clearInterval(interval);\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AAEA,IAAMA,kBAAkB,GAAG,UACzBC,iBADyB,EAEzBC,GAFyB,EAEd;EAEXD,iBAAiB,CAACE,SAAlB,GAA8B,UAACC,OAAD,EAAsC;IAClEC,oCAAeH,GAAf,EAAoBI,OAApB,CAA4B,sBAAU;MACpC,IAAIC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BC,SAAlC,EAA6C;QAC3CH,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BC,SAA9B,CAAwCN,OAAxC;MACD;;MAED,IACE,OAAOG,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BE,MAArC,KAAgD,UAAhD,IACAJ,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BE,MAA9B,CAAqCP,OAArC,MAAkD,IAFpD,EAGE;QACA;MACD;;MAEDG,UAAU,CAACK,cAAX,CAA0BR,OAA1B;IACD,CAbD;EAcD,CAfD;AAgBD,CApBD;;AAsBA,IAAMS,eAAe,GAAG,UACtBZ,iBADsB,EAEtBC,GAFsB,EAEX;EAEXD,iBAAiB,CAACa,MAAlB,GAA2B,UAACC,KAAD,EAAiC;IAC1DV,oCAAeH,GAAf,EAAoBI,OAApB,CAA4B,sBAAU;MACpCC,UAAU,CAACS,cAAX,CAA0BP,OAA1B,GAAoC,CAApC;;MACA,IAAIF,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BQ,MAAlC,EAA0C;QACxCV,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BQ,MAA9B,CAAqCF,KAArC;MACD;;MAEDR,UAAU,CAACW,aAAX,CAAyBC,uBAAWC,IAApC;IACD,CAPD;EAQD,CATD;AAUD,CAdD;;AAgBA,IAAMC,gBAAgB,GAAG,UACvBpB,iBADuB,EAEvBC,GAFuB,EAEZ;EAEX,IAAID,iBAAiB,YAAYqB,SAAjC,EAA4C;IAC1CrB,iBAAiB,CAACsB,OAAlB,GAA4B,UAACR,KAAD,EAAkC;MAC5DV,oCAAeH,GAAf,EAAoBI,OAApB,CAA4B,sBAAU;QACpC,IAAIC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8Be,OAAlC,EAA2C;UACzCjB,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8Be,OAA9B,CAAsCT,KAAtC;QACD;;QAEDR,UAAU,CAACW,aAAX,CAAyBC,uBAAWM,MAApC;MACD,CAND;MAQA,OAAOC,2BAAiBxB,GAAjB,CAAP;MAEAG,oCAAeH,GAAf,EAAoBI,OAApB,CAA4B,sBAAU;;;QACpC,IACEC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BkB,eAA9B,IACApB,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BkB,eAA9B,CAA8CZ,KAA9C,CAFF,EAGE;UACA,IAAMa,iBAAiB,SAAGrB,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BmB,iBAAjC,MAAkD,IAAlD,IAAkDC,aAAlD,GAAkDA,EAAlD,GAAsDV,mCAA7E;;UACA,IAAIZ,UAAU,CAACS,cAAX,CAA0BP,OAA1B,GAAoCmB,iBAAxC,EAA2D;YACzDE,UAAU,CAAC;cACTvB,UAAU,CAACS,cAAX,CAA0BP,OAA1B;cACAF,UAAU,CAACwB,SAAX,CAAqBtB,OAArB;YACD,CAHS,EAGT,MAAEF,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BuB,iBAAhC,MAAiD,IAAjD,IAAiDC,aAAjD,GAAiDA,EAAjD,GAAqDd,yCAH5C,CAAV;UAID,CALD,MAKO;YACLZ,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8ByB,eAA9B,IAAiD3B,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8ByB,eAA9B,CAA8C3B,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8BmB,iBAA5E,CAAjD;YACAO,OAAO,CAACC,IAAR,CAAa,+BAA6BR,iBAA7B,GAA8C,WAA3D;UACD;QACF;MACF,CAhBD;IAiBD,CA5BD;EA6BD;AACF,CAnCD;;AAqCA,IAAMS,gBAAgB,GAAG,UACvBpC,iBADuB,EAEvBC,GAFuB,EAEZ;EAEXD,iBAAiB,CAACqC,OAAlB,GAA4B,UAACC,KAAD,EAAkC;IAC5DlC,oCAAeH,GAAf,EAAoBI,OAApB,CAA4B,sBAAU;MACpC,IAAIC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8B+B,OAAlC,EAA2C;QACzCjC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8B+B,OAA9B,CAAsCD,KAAtC;MACD;;MACD,IAAIpB,sCAA0BlB,iBAAiB,YAAYwC,WAA3D,EAAwE;QACtElC,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8Be,OAA9B,IAAyCjB,UAAU,CAACC,UAAX,CAAsBC,OAAtB,CAA8Be,OAA9B,CAAqCkB,sBACzEH,KADyE,GACpE;UACRI,IAAI,EAAE,IADE;UAERC,MAAM,EAAE,6CAA2CL,KAF3C;UAGRM,QAAQ,EAAE;QAHF,CADoE,CAArC,CAAzC;QAOAtC,UAAU,CAACW,aAAX,CAAyBC,uBAAWM,MAApC;MACD;IACF,CAdD;;IAeA,IAAIN,sCAA0BlB,iBAAiB,YAAYwC,WAA3D,EAAwE;MACtExC,iBAAiB,CAAC6C,KAAlB;IACD;EACF,CAnBD;AAoBD,CAxBD;;AA0BaC,gCAAwB,UACnC9C,iBADmC,EAEnCC,GAFmC,EAGnCM,UAHmC,EAInCwC,WAJmC,EAIX;EAExB,IAAIC,QAAJ;;EAEA,IAAIzC,UAAU,CAACC,OAAX,CAAmByC,YAAvB,EAAqC;IACnCD,QAAQ,GAAGE,8BAAkBH,WAAlB,CAAX;EACD;;EAEDhD,kBAAkB,CAACC,iBAAD,EAAoBC,GAApB,CAAlB;EACAmB,gBAAgB,CAACpB,iBAAD,EAAoBC,GAApB,CAAhB;EACAW,eAAe,CAACZ,iBAAD,EAAoBC,GAApB,CAAf;EACAmC,gBAAgB,CAACpC,iBAAD,EAAoBC,GAApB,CAAhB;EAEA,OAAO;IACL,IAAI+C,QAAJ,EAAcG,aAAa,CAACH,QAAD,CAAb;EACf,CAFD;AAGD,CApBY","names":["bindMessageHandler","webSocketInstance","url","onmessage","message","manage_subscribers_1","forEach","subscriber","optionsRef","current","onMessage","filter","setLastMessage","bindOpenHandler","onopen","event","reconnectCount","onOpen","setReadyState","constants_1","OPEN","bindCloseHandler","WebSocket","onclose","onClose","CLOSED","globals_1","shouldReconnect","reconnectAttempts","_a","setTimeout","reconnect","reconnectInterval","_b","onReconnectStop","console","warn","bindErrorHandler","onerror","error","onError","EventSource","__assign","code","reason","wasClean","close","exports","sendMessage","interval","fromSocketIO","socket_io_1","clearInterval"],"sources":["/Users/mac/node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts"],"sourcesContent":["import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, subscriber.optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}